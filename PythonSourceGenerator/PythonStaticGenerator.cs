using Microsoft.CodeAnalysis;
using Python.Runtime;
using PythonSourceGenerator.Reflection;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace PythonSourceGenerator
{
    [Generator]
    public class PythonStaticGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            //System.Diagnostics.Debugger.Launch();
            if (!context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.PythonVersion", out string pythonVersion))
            {
                System.Console.WriteLine("Testing");
                pythonVersion = "3.12";
            }

            var home = Directory.CreateDirectory(Path.Combine(Path.GetTempPath(), "PythonSourceGenerator"));

            var environment = new PyEnv(home.FullName, pythonVersion);
            var pyFiles = context.AdditionalFiles.Where(f => f.Path.EndsWith(".py", System.StringComparison.OrdinalIgnoreCase));
            int count = 0;
            foreach (var file in pyFiles)
            {
                var @namespace = "Python.Generated"; // TODO : Infer from project

                var fileName = System.IO.Path.GetFileNameWithoutExtension(file.Path);
                // Convert snakecase to pascal case
                var pascalFileName = string.Join("", fileName.Split('_').Select(s => char.ToUpperInvariant(s[0]) + s.Substring(1)));
                var pythonSource = file.GetText(context.CancellationToken);

                File.WriteAllText(Path.Combine(home.FullName, $"test_r{count}.py"), pythonSource.ToString());

                //environment.AddPath(System.IO.Path.GetDirectoryName(file.Path));
                // Fetch functions in Python files
                //var module = environment.LoadModule(fileName);

                List<string> modules = [];

                using (Py.GIL())
                {
                    // create a Python scope
                    using PyModule scope = Py.CreateScope();
                    var testObject = scope.Import($"test_r{count}");
                    var module = ModuleReflection.FromModule(testObject, scope);
                    modules.Add(module);
                }

                var source = $@"// <auto-generated/>
using PythonEnvironments;

namespace {@namespace}
{{
    public static class {pascalFileName}
    {{
        {string.Join("\n", modules)}
    }}
}}
";
                context.AddSource($"{pascalFileName}.py.cs", source);
                context.ReportDiagnostic(Diagnostic.Create(new DiagnosticDescriptor("PSG002", "PythonStaticGenerator", $"Generated {pascalFileName}.py.cs", "PythonStaticGenerator", DiagnosticSeverity.Warning, true), Location.None));

                count++;
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // TODO
        }
    }
}