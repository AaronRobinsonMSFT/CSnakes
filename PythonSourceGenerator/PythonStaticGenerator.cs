using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Python.Runtime;
using PythonSourceGenerator.Reflection;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace PythonSourceGenerator
{
    [Generator]
    public class PythonStaticGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            //System.Diagnostics.Debugger.Launch();
            if (!context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.PythonVersion", out string pythonVersion))
            {
                pythonVersion = "3.12.4";
            }

            if (!context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.PythonLocation", out string pythonLocation))
            {
                pythonLocation = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), "Python", pythonVersion);
            }

            var pyFiles = context.AdditionalFiles
                .Where(f => Path.GetExtension(f.Path) == ".py");
            int count = 0;
            foreach (var file in pyFiles)
            {
                using var environment = new PyEnv(
                    Path.GetDirectoryName(file.Path),
                    pythonLocation,
                    pythonVersion);

                // Add environment path
                var @namespace = "Python.Generated"; // TODO : Infer from project

                var fileName = Path.GetFileNameWithoutExtension(file.Path);
                // Convert snakecase to pascal case
                var pascalFileName = string.Join("", fileName.Split('_').Select(s => char.ToUpperInvariant(s[0]) + s.Substring(1)));

                List<MethodDeclarationSyntax> methods;
                using (Py.GIL())
                {
                    // create a Python scope
                    using PyModule scope = Py.CreateScope();
                    var pythonModule = scope.Import(fileName);
                    methods = ModuleReflection.MethodsFromModule(pythonModule, scope);
                }
                var source = $@"// <auto-generated/>
using Python.Runtime;
using PythonEnvironments;


namespace {@namespace}
{{
    public static class {pascalFileName}
    {{
        {methods.Compile()}
    }}
}}
";
                context.AddSource($"{pascalFileName}.py.cs", source);
                context.ReportDiagnostic(Diagnostic.Create(new DiagnosticDescriptor("PSG002", "PythonStaticGenerator", $"Generated {pascalFileName}.py.cs", "PythonStaticGenerator", DiagnosticSeverity.Warning, true), Location.None));

                count++;
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // TODO
        }
    }
}