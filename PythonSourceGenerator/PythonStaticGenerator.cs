using Microsoft.CodeAnalysis;
using PythonEnvironments;
using System.Diagnostics;
using System.Linq;

namespace PythonSourceGenerator
{
    [Generator]
    public class PythonStaticGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            Debugger.Launch();
            context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.PythonVersion", out var pythonVersion) ;
            if (pythonVersion == null)
            {
                pythonVersion = "3.11";
            }
            var environment = new PythonEnvironment("", pythonVersion);
            var pyFiles = context.AdditionalFiles.Where(f => f.Path.EndsWith(".py", System.StringComparison.OrdinalIgnoreCase));
            foreach (var file in pyFiles)
            {
                var @namespace = "Python.Generated"; // TODO : Infer from project

                var fileName = System.IO.Path.GetFileNameWithoutExtension(file.Path);
                // Convert snakecase to pascal case
                var pascalFileName = string.Join("", fileName.Split('_').Select(s => char.ToUpperInvariant(s[0]) + s.Substring(1)));
                var pythonSource = file.GetText(context.CancellationToken);
                
                //environment.AddPath(System.IO.Path.GetDirectoryName(file.Path));
                // Fetch functions in Python files
                //var module = environment.LoadModule(fileName);

                var source = $@"// <auto-generated/>
using PythonEnvironments;

namespace {@namespace}
{{
    public static class {pascalFileName}
    {{
        public static void Main(string[] args)
        {{
            PythonEnvironment.Initialize(""/usr/bin/python3"");
            // TODO Whatever helllo there...;
        }}
    }}
}}
";
                context.AddSource($"{pascalFileName}.py.cs", source);
                context.ReportDiagnostic(Diagnostic.Create(new DiagnosticDescriptor("PSG002", "PythonStaticGenerator", $"Generated { pascalFileName }.py.cs", "PythonStaticGenerator", DiagnosticSeverity.Warning, true), Location.None));
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // TODO
        }
    }
}
